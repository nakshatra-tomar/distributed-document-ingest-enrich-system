version: "3.8"

networks:
  app: {}

volumes:
  couchbase_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    networks: [app]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    networks: [app]
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"   # external (host) listener
      - "9101:9101"   # JMX
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # internal + external listeners (classic pattern for Docker)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      # simple readiness probe â€” proves the broker is responsive
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    networks: [app]
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
      echo 'Creating Kafka topics...';
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic documents.raw --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic documents.processed --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic documents.errors --partitions 3 --replication-factor 1;
      echo 'Topics created:'; kafka-topics --bootstrap-server kafka:29092 --list;
      "

  couchbase:
    image: couchbase:enterprise-7.2.0
    container_name: couchbase
    networks: [app]
    ports:
      - "8091-8096:8091-8096"
      - "11210-11211:11210-11211"
    environment:
      CLUSTER_NAME: test-cluster
    volumes:
      - couchbase_data:/opt/couchbase/var
    healthcheck:
      # 8091 /pools responds once the node is up
      test: ["CMD", "curl", "-fsS", "http://localhost:8091/pools"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks: [app]
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      # optional: enable in-app config changes
      # DYNAMIC_CONFIG_ENABLED: "true"
    restart: unless-stopped
